name: Build and Deploy Function App with Infrastructure

on:
  push:
    branches:
      - main 
  workflow_dispatch:

env:
  # === Resource Configuration ===
  AZURE_RESOURCE_GROUP: 'pzachrg'                 # Your target resource group name
  AZURE_LOCATION: 'Canada East'                  # Your target Azure region (should match parameters file)
  FUNCTIONAPP_NAME: 'pzachcomfn'             # Base name for Function App (MUST match value in parameters file)

  # === Code Configuration ===
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'           # Path to your function app code root
  PYTHON_VERSION: '3.11'                        # Python version for build environment

  # === Infrastructure Paths ===
  INFRA_TEMPLATE_PATH: './infra/azuredeploy.json'
  INFRA_PARAMETERS_PATH: './infra/azuredeploy.parameters.json'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: functionapp-artifact-${{ github.run_number }}
    steps:
    - name: Checkout GitHub Action
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Dependencies Using Pip
      shell: bash
      run: |
        # pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        # python -m venv --copies .venv # Create virtual env to isolate packages
        # source .venv/bin/activate
        # python -m pip install --upgrade pip
        # pip install -r requirements.txt
        # # No target needed if we zip the whole dir including .venv or let Oryx run
        # deactivate
        # popd
        # Alternative: Install into target folder if disabling Oryx build later
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages"
        popd

    - name: Archive Function App Artifact
      uses: actions/upload-artifact@v4
      with:
        name: functionapp-artifact-${{ github.run_number }}
        path: |
          ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          !${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/.venv # Exclude venv if created

  deploy_infrastructure:
    runs-on: ubuntu-latest
    needs: build # Can run in parallel with build if desired by removing 'needs'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Use Service Principal credentials

    - name: Deploy ARM Template
      uses: azure/arm-deploy@v1
      with:
        # subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Optional: Explicitly set if needed
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
        template: ${{ env.INFRA_TEMPLATE_PATH }}
        parameters: ${{ env.INFRA_PARAMETERS_PATH }}
        failOnStdErr: false
        deploymentMode: Incremental # Safest mode

    - name: Logout from Azure
      run: |
        az logout
        az cache purge
        az account clear

  deploy_code:
    runs-on: ubuntu-latest
    needs: [build, deploy_infrastructure] # Wait for build artifact AND infra deployment
    environment: dev

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build.outputs.artifact_name }}
        path: ./deploy_package

    # --- START DETAILED VERIFICATION STEP ---
    - name: Verify Contents of Deployment Package (Pre-built Focus)
      run: |
        echo "--- Listing Root Contents of ./deploy_package ---"
        ls -l ./deploy_package
        echo "--- Checking for .python_packages directory ---"
        if [ -d "./deploy_package/.python_packages" ]; then
          echo ".python_packages directory FOUND."
          echo "--- Listing Contents of .python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages ---"
          # List top-level packages installed
          ls -l ./deploy_package/.python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages/
          echo "--- Checking specifically for azure/data ---"
          # Check if the specific azure/data path exists
          if [ -d "./deploy_package/.python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages/azure/data" ]; then
            echo ">>> SUCCESS: azure/data directory FOUND within site-packages."
            echo "--- Listing contents of azure/data ---"
            ls -l ./deploy_package/.python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages/azure/data/
          else
            echo ">>> FAILURE: azure/data directory NOT FOUND in site-packages."
            echo ">>> Check the 'pip install --target' command in the 'build' job logs."
          fi
        else
          echo ">>> FAILURE: .python_packages directory NOT FOUND."
          echo ">>> Check the 'pip install --target' command and 'upload-artifact' step in the 'build' job."
        fi
        echo "--- Done Verifying ---"
      shell: bash
      # Make sure PYTHON_VERSION env var is available if needed, or hardcode 3.11 if certain
      env:
        PYTHON_VERSION: ${{ env.PYTHON_VERSION }}
    # --- END DETAILED VERIFICATION STEP ---

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Use Service Principal credentials

    - name: Deploy Function App Code
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.FUNCTIONAPP_NAME }}
        package: ./deploy_package
        # publish-profile: # NOT NEEDED when using azure/login with service principal
        # === Option 1: Let Azure build using Oryx (Simpler) ===
        # scm-do-build-during-deployment: true
        # enable-oryx-build: true
        # === Option 2: Deploy pre-built package (Requires pip install --target in build job) ===
        scm-do-build-during-deployment: false
        enable-oryx-build: false

    - name: Logout from Azure
      run: |
        az logout
        az cache purge
        az account clear